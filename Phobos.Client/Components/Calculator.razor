@using Phobos.Client.JsInterop
@using Phobos.Client.JsInterop.Events.MouseMove
@using Phobos.Client.JsInterop.Events.Resized
@using Phobos.Client.JsInterop.Events.Wheel
@using Phobos.Core
@using Phobos.Core.Drawing
@using SixLabors.ImageSharp
@using Point = System.Drawing.Point
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@inject ILogger<Calculator> Logger;
@inject GraphCanvas Canvas;
@inject JsInteropService Js;
@inject MouseMoveJsEventHandler MouseMoveHandler;
@inject ResizedJsEventHandler ResizedHandler;
@inject WheelJsEventHandler WheelHandler;

<LoadingProgress>
    <main>
        <div class="is-flex is-flex-wrap-wrap-reverse is-justify-content-center">
            <nav class="panel functions-panel is-flex-grow-2">
                <p class="panel-heading functions-panel-heading">
                    Functions
                </p>
                @for (int i = 0; i < _functions.Count; i++)
                {
                    int capturedIndex = i;
                    var function = _functions[capturedIndex];
                    
                    <div class="panel-block function-input-block">
                        <p class="control is-flex is-justify-content-space-evenly is-align-items-center">
                            <input 
                                class="input function-color-selection-input mx-1
                                @(function.IsIncorrectInput ? "is-danger" : string.Empty)"
                                type="color" 
                                value="#@(function.Function.Color.ToHex()[..6])"
                                @oninput=@(args => FunctionColorChanged(args, capturedIndex))/>
                            
                            <b class="mx-1">y=</b>
                            
                            <input
                                class="input
                                @(function.IsIncorrectInput ? "is-danger" : string.Empty)"
                                type="text"
                                placeholder="x"
                                value="@(function.Function.Input)"
                                @onchange=@(args => FunctionInputChanged(args, capturedIndex))/>

                            <button class="button mx-1" @onclick=@(() => RemoveFunction(capturedIndex))>
                                <span class="icon">
                                    <img src="cross.svg" alt="Remove"/>
                                </span>
                            </button>
                        </p>
                    </div>
                }
                <div class="panel-block">
                    <p class="control">
                        <button class="button" @onclick="() => AddFunction()">
                            <span class="icon">
                                <img src="plus.svg" alt="Add"/>
                            </span>
                        </button>
                    </p>
                </div>
            </nav>
            <div class="plane is-flex-grow-1" id="canvas-container">
                <img 
                    class="plane is-flex-grow-1 has-background-grey" 
                    src="@_imageBase64" 
                    alt="Plane" 
                    id="canvas-image"
                    draggable="false"/>
            </div>
        </div>
    </main>
</LoadingProgress>

@code {
    private readonly List<InputFunction> _functions = new();
    private string _imageBase64 = string.Empty;
    private readonly Random _rnd = new();
    private double _scale = 1;
    private Point? _currentOrigin = null;
    private Point? _currentMousePosition = null;
    private Point? _oldMousePosition = null;
    
    protected override async Task OnInitializedAsync()
    {
        await AddFunction(Color.Red, redraw: false);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await RegisterJsEventHandlers();
            SubscribeToJsEvents();
            await Js.RegisterDotNetEventHandlers();
            
            await Redraw(getSizeFromCanvas: true);
            StateHasChanged();
        }
    }

    private void SubscribeToJsEvents()
    {
        MouseMoveHandler.Subscribe(OnMouseMove);
        ResizedHandler.Subscribe(OnResized);
        WheelHandler.Subscribe(OnWheel);
    }

    private async Task RegisterJsEventHandlers()
    {
        await Js.RegisterJsMouseEventHandlers("canvas-image");
        await Js.RegisterJsResizeHandlers("canvas-container");
        await Js.RegisterJsWheelHandlers("canvas-image");
    }
    
    private async Task OnMouseMove(MouseMoveJsEvent @event)
    {
        _oldMousePosition = _currentMousePosition;
        _currentMousePosition = new((int)@event.ClientX, (int)@event.ClientY);;
        
        if (@event.IsDown)
        {
            await Redraw();
        }
    }
    
    private async Task OnResized(ResizedJsEvent @event)
    {
        await Redraw();
    }

    private async Task OnWheel(WheelJsEvent @event)
    {
        if (@event.DeltaY > 0)
        {
            Logger.LogInformation("Delta > 0, scrolling down, zooming out!");
            _scale -= 0.1;
        }
        else
        {
            Logger.LogInformation("Delta < 0, scrolling up, zooming in!");
            _scale += 0.1;
        }

        await Redraw();
    }

    private async Task AddFunction(Color? color = null, bool redraw = true)
    {
        if (color is null)
        {
            var buffer = new byte[3];
            _rnd.NextBytes(buffer);
            
            color = Color.FromRgb(buffer[0], buffer[1], buffer[2]);
        }
        
        var function = new Function()
        {
            Input = string.Empty,
            Color = color.Value
        };

        var inputFunction = new InputFunction(function);
        
        _functions.Add(inputFunction);

        if(redraw) await Redraw();
    }

    private async Task RemoveFunction(int index, bool redraw = true)
    {
        var function = _functions[index];
        
        _functions.RemoveAt(index);

        if(redraw) await Redraw();
    }
    
    private async Task FunctionInputChanged(ChangeEventArgs args, int functionIndex)
    {
        string? input = args.Value?.ToString();
        
        var function = _functions[functionIndex];
        
        if (string.IsNullOrWhiteSpace(input))
        {
            await RemoveFunction(functionIndex);
            return;
        }
        
        function.Function.Input = input;

        await Redraw();
    }
    
    private async Task FunctionColorChanged(ChangeEventArgs args, int functionIndex)
    {
        string? colorHex = args.Value?.ToString();
        
        var function = _functions[functionIndex];

        if (string.IsNullOrWhiteSpace(colorHex) || !Color.TryParseHex(colorHex, out Color color))
        {
            function.IsIncorrectInput = true;
            return;
        }

        function.Function.Color = color;

        await Redraw();
    }

    private async Task Redraw(bool getSizeFromCanvas = false)
    {
        string sizeSourceElementId = getSizeFromCanvas ? "canvas-container" : "canvas-image";
        
        var size = await Js.GetCanvasSize(sizeSourceElementId);

        int width = (int)size.Width;
        int height = (int)size.Height;

        if (_currentOrigin is null || _currentMousePosition is null || _oldMousePosition is null)
        {
            _currentOrigin = new(width / 2, height / 2);
        }
        else
        {
            int mouseMovedX = _currentMousePosition.Value.X - _oldMousePosition.Value.X;
            int mouseMovedY = _currentMousePosition.Value.Y - _oldMousePosition.Value.Y;

            int newX = _currentOrigin.Value.X + mouseMovedX;
            int newY = _currentOrigin.Value.Y + mouseMovedY;
            
            _currentOrigin = new Point(newX, newY);
        }

        UpdateFunctions();
        
        Canvas.Draw(width, height, _currentOrigin.Value, _scale);
        string imageBase64 = Canvas.SaveAsBase64();
        
        await Js.SetImage("canvas-image", imageBase64);
    }

    private void UpdateFunctions()
    {
        Canvas.ClearFunctions();
        
        foreach (var inputFunction in _functions)
        {
            var function = inputFunction.Function;
            if (!string.IsNullOrWhiteSpace(function.Input))
            {
                Canvas.AddFunction(function);
            }
        }
    }

    private class InputFunction(Function function, bool isIncorrectInput = false)
    {
        public Function Function { get; set; } = function;
        public bool IsIncorrectInput { get; set; } = isIncorrectInput;
    }
}